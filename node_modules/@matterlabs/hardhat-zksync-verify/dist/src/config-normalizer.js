"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompilerSolcUserConfigNormalizer = exports.OverrideCompilerSolcUserConfigNormalizer = void 0;
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const utils_1 = require("./utils");
class OverrideCompilerSolcUserConfigNormalizer {
    suituble(_solcUserConfig, _file) {
        return _solcUserConfig instanceof Map && _file !== undefined;
    }
    normalize(_compiler, _userConfigCompilers, _file) {
        const compilerInfo = _userConfigCompilers.get(_file);
        return compilerInfo?.eraVersion
            ? (0, utils_1.getZkVmNormalizedVersion)(_compiler.version, compilerInfo.eraVersion)
            : _compiler.version;
    }
}
exports.OverrideCompilerSolcUserConfigNormalizer = OverrideCompilerSolcUserConfigNormalizer;
class CompilerSolcUserConfigNormalizer {
    suituble(solcUserConfig, _file) {
        return solcUserConfig instanceof Array && _file === undefined;
    }
    normalize(_compiler, _userConfigCompilers, _file) {
        const compilerInfos = _userConfigCompilers.filter((userCompilerInfo) => userCompilerInfo.version === _compiler.version);
        if (compilerInfos.length > 1) {
            const compilerInfosWithEraVersion = compilerInfos.filter((userCompilerInfo) => userCompilerInfo.eraVersion);
            if (compilerInfosWithEraVersion.length > 0 && compilerInfosWithEraVersion.length !== compilerInfos.length) {
                throw new errors_1.ZkSyncVerifyPluginError((0, constants_1.COMPILERS_CONFLICT_ZKVM_SOLC)(_compiler.version));
            }
        }
        const compilerInfo = compilerInfos[0];
        return compilerInfo?.eraVersion
            ? (0, utils_1.getZkVmNormalizedVersion)(_compiler.version, compilerInfo.eraVersion)
            : _compiler.version;
    }
}
exports.CompilerSolcUserConfigNormalizer = CompilerSolcUserConfigNormalizer;
//# sourceMappingURL=config-normalizer.js.map